#!/usr/bin/env python
#
# Copyright (C) 2015 Pavel Kirienko <pavel.kirienko@zubax.com>
#

import time
import sys
import glob
import traceback
import threading
import logging
import os

import serial
import serial.tools.list_ports

try:
    import Tkinter as tkinter
    import ttk
    import tkMessageBox as msgbox
except ImportError:
    import tkinter
    from tkinter import ttk
    import tkinter.messagebox as msgbox

import stm32_loader

SYNCHRONIZATION_PREFIX = b'\r\n\r\nbootloader\r\n'

def list_serial_ports():
    if sys.platform.startswith('win'):
        ports = [dev for dev,_name,_usb in serial.tools.list_ports.comports()]
    elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
        ports = glob.glob('/dev/ttyUSB*') + glob.glob('/dev/ttyACM*')
    elif sys.platform.startswith('darwin'):
        ports = glob.glob('/dev/tty.*') + glob.glob('/dev/cu.*')
    else:
        raise EnvironmentError('Unsupported platform: %s' % sys.platform)
    return list(sorted(ports))

def get_executable_directory():
    '''Valid for cx_Freeze'''
    return os.path.dirname(sys.executable if getattr(sys, 'frozen', False) else __file__)

def list_firmware_files():
    pathes = glob.glob(os.path.join(get_executable_directory(), '*.bin'))
    pathes = sorted(pathes)
    return list(map(lambda x: x.replace('./', ''), pathes))

class Application(ttk.Frame):
    def __init__(self, master=None):
        ttk.Frame.__init__(self, master)

        self.grid()
        self.winfo_toplevel().resizable(0,0)
        try:
            self.winfo_toplevel().attributes(toolwindow=1)      # Windows
        except Exception:
            pass

        # Process state variables
        self.process_running = False            # True if running
        self.process_progress_percent = None    # Either None or [0, 100]
        self.process_error_string = None        # None if OK, string if failed
        self.process_status_string = None       # Current status as string

        # These data structures are being continuously updated in background
        self.available_ports = []
        self.available_firmwares = []

        self.firmwares_label = ttk.Label(self, text='Firmware:')
        self.firmwares_label.grid(row=0, sticky='E')

        self.firmwares = ttk.Combobox(self, width=30)
        self.firmwares.grid(row=0, column=1, sticky='WE')
        self.firmwares['state'] = 'readonly'

        self.ports_label = ttk.Label(self, text='Port:')
        self.ports_label.grid(row=1, sticky='E')

        self.ports = ttk.Combobox(self)
        self.ports.grid(row=1, column=1, sticky='WE')
        self.ports['state'] = 'readonly'

        self.btn_start = ttk.Button(self, text='Start', command=self.start)
        self.btn_start.grid(row=0, column=2, rowspan=2, sticky='NSWE')

        self.progressbar = ttk.Progressbar(self)
        self.progressbar.grid(row=2, columnspan=3, sticky='WE')

        self.label_status = ttk.Label(self, text='Select firmware and port, then press Start')
        self.label_status.grid(row=3, columnspan=3, sticky='WE')

        background_refreshing_thread = threading.Thread(name='background_refresher',
                                                        target=self.background_refresh_loop)
        background_refreshing_thread.daemon = True
        background_refreshing_thread.start()

        self.timer_5hz()

    def update_process_status(self):
        if self.process_running:
            self.label_status['text'] = self.process_status_string if self.process_status_string is not None else ''
            if self.process_progress_percent is None:
                self.progressbar['mode'] = 'indeterminate'
                self.progressbar.step()
            else:
                self.progressbar['mode'] = 'determinate'
                self.progressbar['value'] = self.process_progress_percent

    def report_process_completion(self):
        self.label_status['text'] = ''
        self.progressbar['mode'] = 'determinate'
        self.progressbar['value'] = 0
        if self.process_error_string is None:
            msgbox.showinfo('Success', 'Completed successfully! Now disconnect the device from power supply.')
        else:
            msgbox.showerror('Failure', 'Process failed, please try again.\nError: %s' % self.process_error_string)

    def perform_async_gui_update(self):
        def update_one(box, source):
            try:
                current_port = box['values'][box.current()]
            except IndexError:
                current_port = None
            box['values'] = source
            if current_port in source:
                box.set(current_port)
            else:
                try:
                    box.current(0)
                except Exception:
                    box.set('')
        if set(self.ports['values']) != set(self.available_ports):
            logging.info('Updating available ports')
            update_one(self.ports, self.available_ports)
        if set(self.firmwares['values']) != set(self.available_firmwares):
            logging.info('Updating available firmwares')
            update_one(self.firmwares, self.available_firmwares[::-1])

    def background_refresh_loop(self):
        while True:
            try:
                self.available_ports = list_serial_ports()
            except Exception:
                logging.error('Background port refresh failed', exc_info=True)
            try:
                self.available_firmwares = list_firmware_files()
            except Exception:
                logging.error('Background firmware refresh failed', exc_info=True)
            time.sleep(2)

    def timer_5hz(self):
        if not hasattr(self, '_tmr_last_process_running'):
            self._tmr_last_process_running = False

        if self._tmr_last_process_running != self.process_running:
            self._tmr_last_process_running = self.process_running
            if not self.process_running:
                self.report_process_completion()

        self.update_process_status()
        self.perform_async_gui_update()
        self.after(200, self.timer_5hz)

    def start(self):
        if self.process_running:
            msgbox.showwarning('Rejected', 'Process is already running')
            return

        firmware_path = self.firmwares.get()
        if not firmware_path:
            msgbox.showerror('Rejected', 'Select firmware first')
            return

        try:
            with open(firmware_path, 'rb') as f:
                firmware_image = f.read()
        except Exception as ex:
            logging.error('Could not load firmware', exc_info=True)
            msgbox.showerror('Rejected', 'Could not load firmware!\n' + str(ex))
            return
        logging.info('Firmware loaded; name: %s, size: %.2fKB', firmware_path, len(firmware_image) / 1024.)

        port = self.ports.get()
        if not port:
            msgbox.showerror('Rejected', 'Select serial port first')
            return

        def progress_report_callback(status, x):
            self.process_status_string = status
            self.process_progress_percent = None if x is None else int(x * 100 + 0.5)

        def runner():
            self.process_running = True
            logging.info('Process started')
            try:
                stm32_loader.load(port, firmware_image,
                                  progress_report_callback=progress_report_callback,
                                  synchronization_prefix=SYNCHRONIZATION_PREFIX)
            except Exception as ex:
                self.process_error_string = '%s %s' % (type(ex).__name__, str(ex))
                logging.error('Process failed', exc_info=True)
            else:
                self.process_error_string = None
            self.process_running = False
            self.process_progress_percent = None

        worker = threading.Thread(name='worker', target=runner)
        worker.daemon = True
        worker.start()


logging.basicConfig(stream=sys.stdout, level=logging.DEBUG, format='%(asctime)s %(levelname)s %(name)s: %(message)s')

app = Application()
app.master.title('Zubax serial updater')
app.mainloop()
